syntax="proto3";
package itube.users;
option go_package = "pkg/api";

import "user.proto";
import "google/protobuf/empty.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/mwitkow/go-proto-validators/validator.proto";

option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.goproto_registration) = true;
option (gogoproto.goproto_enum_prefix_all) = false;
option (gogoproto.goproto_getters_all) = false;
option (gogoproto.goproto_unrecognized_all) = false;
option (gogoproto.goproto_unkeyed_all) = false;
option (gogoproto.goproto_sizecache_all) = false;
option (gogoproto.goproto_extensions_map_all) = false;

// Identity сервис обеспечивает регистрацию и авторизацию пользователей.
// 
// Хоть все запросы и требуют указывать домен, но на самом деле пользователи
// к нему не привязаны и могут быть, раз зарегистрированными, авторизоваться
// с любым доменом.
service Identity {
  // Register регистрирует и возвращает информацию о пользователе.
  //
  // Если пользователь уже зарегистрирован, но пароль для него не установлен, то
  // устанавливает новый пароль. Данный случай возникает, если до этого
  // пользователь был зарегистрирован через внешнего провайдера.
  //
  // Возвращает ошибки:
  //  - AlreadyExists - пользователь уже зарегистрирован и у него задан пароль
  //  - NotFound - пользователь заблокирован
  //  - InvalidArgument - неверный формат данных входящего запроса
  //  - Internal - внутренние ошибки
  rpc Register (Login) returns (User);

  // Authorize авторизует пользователя по логину (email) и паролю. Возвращает
  // информацию о пользователе в случае успешной авторизации. В противном случае
  // возвращает ошибку.
  //
  // Возвращает ошибки:
  //  - NotFound - пользователь не зарегистрирован или блокирован
  //  - InvalidArgument - неверный пароль пользователя
  //  - Internal - внутренние ошибки
  rpc Authorize (Login) returns (User);

  // SetPassword заменяет пароль пользователя. Возвращает ошибку, если
  // пользователь не зарегистрирован.
  //
  // Возвращает ошибки:
  //  - NotFound - пользователь не зарегистрирован
  //  - Internal - внутренние ошибки
  rpc SetPassword (Password) returns (google.protobuf.Empty);

  // Update обновляет информацию о пользователе. Возвращает ошибку,
  // если пользователь не зарегистрирован. Информация, что email проверен, а 
  // так же дата обновления игнорируется.
  //
  // Возвращает ошибки:
  //  - AlreadyExists - пользователь с таким email уже зарегистрирован
  //  - NotFound - пользователь не зарегистрирован
  //  - InvalidArgument - неверный формат данных входящего запроса
  //  - Internal - внутренние ошибки
  rpc Update (User) returns (google.protobuf.Empty);
  
  // Block используется для блокировки/разблокировки пользователя. 
  // Заблокированный пользователь продолжает оставаться зарегистрированных,
  // но не может авторизоваться.
  //
  // Возвращает ошибки:
  //  - NotFound - пользователь не зарегистрирован
  //  - InvalidArgument - неверный формат данных входящего запроса
  //  - Internal - внутренние ошибки
  rpc Block (BlockID) returns (google.protobuf.Empty);

  // Get возвращает информацию о пользователе по идентификатору или email.
  //
  // Возвращает ошибки:
  //  - NotFound - пользователь не зарегистрирован
  //  - InvalidArgument - неверный формат данных входящего запроса
  //  - Internal - внутренние ошибки
  rpc Get (UserID) returns (User);

  // List возвращает информацию о пользователях по идентификатору или email.
  // Используется для получения информации о других пользователях в потоке.
  rpc List (stream UserID) returns (stream User);
}

// Login описывает информацию для регистрации нового пользователя.
// Используемый в логине домен автоматически возвращается в информации об
// авторизованном пользователе, хоть его физической привязки к домену нет.
message Login {
  // домен
  string domain = 1 [
    (validator.field) = {string_not_empty: true}];
  // email-адрес пользователя (используется в качестве логина)
  string email = 2 [
    (validator.field) = {string_not_empty: true}];
  // пароль пользователя
  string password = 3 [
    (validator.field) = {string_not_empty: true}];
  // необязательная дополнительная информация об источнике регистрации
  RegInfo reg_info = 10 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
}

// Password используется для изменения пароля пользователя.
message Password {
  // домен
  string domain = 1 [
    (validator.field) = {string_not_empty: true}];
  // уникальный идентификатор пользователя
  string uid = 2 [
    (gogoproto.customname) = "UID", 
    (validator.field) = {string_not_empty: true, 
      uuid_ver: 4, human_error: "invalid unique identifier format"}];
  // пароль пользователя
  string password = 3 [
    (validator.field) = {string_not_empty: true}];
}

// UserID используется для получения информации о пользователе по его
// логину или уникальному идентификатору.
message UserID {
  // домен
  string domain = 1 [
    (validator.field) = {string_not_empty: true}];
  oneof user {
    // уникальный идентификатор пользователя
    string uid = 2 [
      (gogoproto.customname) = "UID", 
      (validator.field) = {string_not_empty: true, 
        uuid_ver: 4, human_error: "invalid unique identifier format"}];
    // email-адрес пользователя
    string email = 3 [
      (validator.field) = {string_not_empty: true}];
  }
}

// BlockID используется для блокировки/разблокировки пользователя.
message BlockID {
  // домен
  string domain = 1 [
    (validator.field) = {string_not_empty: true}];
  // уникальный идентификатор пользователя
  string uid = 2 [
    (gogoproto.customname) = "UID", 
    (validator.field) = {string_not_empty: true, 
      uuid_ver: 4, human_error: "invalid unique identifier format"}];
  // флаг для блокировки или разблокировки пользователя
  bool blocked = 3;
}