// Code generated by "go-syncmap -type states<string,stateObj>"; DO NOT EDIT.

package openid

import "sync"

func _() {
	// An "cannot convert states literal (type states) to type sync.Map" compiler error signifies that the base type have changed.
	// Re-run the go-syncmap command to generate them again.
	_ = (sync.Map)(states{})
}

var _nil_states_stateObj_value = func() (val stateObj) { return }()

func (m *states) Store(key string, value stateObj) {
	(*sync.Map)(m).Store(key, value)
}

func (m *states) LoadOrStore(key string, value stateObj) (stateObj, bool) {
	actual, loaded := (*sync.Map)(m).LoadOrStore(key, value)
	if actual == nil {
		return _nil_states_stateObj_value, loaded
	}
	return actual.(stateObj), loaded
}

func (m *states) Load(key string) (stateObj, bool) {
	value, ok := (*sync.Map)(m).Load(key)
	if value == nil {
		return _nil_states_stateObj_value, ok
	}
	return value.(stateObj), ok
}

func (m *states) Delete(key string) {
	(*sync.Map)(m).Delete(key)
}

func (m *states) Range(f func(key string, value stateObj) bool) {
	(*sync.Map)(m).Range(func(key, value interface{}) bool {
		return f(key.(string), value.(stateObj))
	})
}
