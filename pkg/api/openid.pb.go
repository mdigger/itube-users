// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: openid.proto

package api

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	_ "github.com/mwitkow/go-proto-validators"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Provider описывает информацию для получения URL для авторизации по протоколу
// OpenID Connect.
type Provider struct {
	// домен сайта
	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	// уникальный идентификатор провайдера авторизации
	// должен совпадать с названием, используемым при конфигурации сервиса
	// сейчас из провайдеров поддерживается только "google"
	Provider string `protobuf:"bytes,2,opt,name=provider,proto3" json:"provider,omitempty"`
	// url для возврата после авторизации
	// данный url должен быть зарегистрирован и указан в списке допустимых
	// на сервере провайдера авторизации, иначе будет возвращаться ошибка
	RedirectURI string `protobuf:"bytes,3,opt,name=redirect_uri,json=redirectUri,proto3" json:"redirect_uri,omitempty"`
	// дополнительные необязательные параметры, используемые при авторизации
	// например: login_hint, hd, display
	// https://developers.google.com/identity/protocols/oauth2/openid-connect#authenticationuriparameters
	Params map[string]string `protobuf:"bytes,4,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// необязательная дополнительная информация об источнике регистрации
	RegInfo `protobuf:"bytes,10,opt,name=reg_info,json=regInfo,proto3,embedded=reg_info" json:"reg_info"`
}

func (m *Provider) Reset()         { *m = Provider{} }
func (m *Provider) String() string { return proto.CompactTextString(m) }
func (*Provider) ProtoMessage()    {}
func (*Provider) Descriptor() ([]byte, []int) {
	return fileDescriptor_341b5f7d56cf065a, []int{0}
}
func (m *Provider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Provider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Provider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Provider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Provider.Merge(m, src)
}
func (m *Provider) XXX_Size() int {
	return m.Size()
}
func (m *Provider) XXX_DiscardUnknown() {
	xxx_messageInfo_Provider.DiscardUnknown(m)
}

var xxx_messageInfo_Provider proto.InternalMessageInfo

// LoginURL возвращает адрес для авторизации пользователя. domain просту
// дублируется тот, что был использован в запросе и ни на что не влияет.
type LoginURL struct {
	// домен
	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	// URL для перехода пользователя на сервер авторизации.
	URL string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (m *LoginURL) Reset()         { *m = LoginURL{} }
func (m *LoginURL) String() string { return proto.CompactTextString(m) }
func (*LoginURL) ProtoMessage()    {}
func (*LoginURL) Descriptor() ([]byte, []int) {
	return fileDescriptor_341b5f7d56cf065a, []int{1}
}
func (m *LoginURL) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginURL) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginURL.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoginURL) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginURL.Merge(m, src)
}
func (m *LoginURL) XXX_Size() int {
	return m.Size()
}
func (m *LoginURL) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginURL.DiscardUnknown(m)
}

var xxx_messageInfo_LoginURL proto.InternalMessageInfo

// AuthCode заполняется ответом от сервера авторизации.
//
// На данный момент в качестве провайдера поддерживается только "google".
// state и code возвращаются в обратном редиректе с сервера провайдера после
// авторизации в виде именованных параметров url.
type AuthCode struct {
	// домен сайта
	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	// уникальный идентификатор провайдера авторизации
	// должен совпадать с названием, используемым при конфигурации сервиса
	Provider string `protobuf:"bytes,2,opt,name=provider,proto3" json:"provider,omitempty"`
	// state из параметров URL ответа
	State string `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	// code из параметров URL ответа
	Code string `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *AuthCode) Reset()         { *m = AuthCode{} }
func (m *AuthCode) String() string { return proto.CompactTextString(m) }
func (*AuthCode) ProtoMessage()    {}
func (*AuthCode) Descriptor() ([]byte, []int) {
	return fileDescriptor_341b5f7d56cf065a, []int{2}
}
func (m *AuthCode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthCode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthCode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthCode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthCode.Merge(m, src)
}
func (m *AuthCode) XXX_Size() int {
	return m.Size()
}
func (m *AuthCode) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthCode.DiscardUnknown(m)
}

var xxx_messageInfo_AuthCode proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Provider)(nil), "itube.users.Provider")
	golang_proto.RegisterType((*Provider)(nil), "itube.users.Provider")
	proto.RegisterMapType((map[string]string)(nil), "itube.users.Provider.ParamsEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "itube.users.Provider.ParamsEntry")
	proto.RegisterType((*LoginURL)(nil), "itube.users.LoginURL")
	golang_proto.RegisterType((*LoginURL)(nil), "itube.users.LoginURL")
	proto.RegisterType((*AuthCode)(nil), "itube.users.AuthCode")
	golang_proto.RegisterType((*AuthCode)(nil), "itube.users.AuthCode")
}

func init() { proto.RegisterFile("openid.proto", fileDescriptor_341b5f7d56cf065a) }
func init() { golang_proto.RegisterFile("openid.proto", fileDescriptor_341b5f7d56cf065a) }

var fileDescriptor_341b5f7d56cf065a = []byte{
	// 490 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x92, 0x4f, 0x6b, 0xdb, 0x4c,
	0x10, 0xc6, 0xb5, 0xfe, 0x17, 0x65, 0x94, 0x17, 0xde, 0x2e, 0x09, 0x08, 0x51, 0x56, 0xae, 0x4f,
	0xbe, 0x58, 0xa6, 0x2e, 0x29, 0x71, 0x6f, 0x75, 0xdb, 0x83, 0xa9, 0xa1, 0x61, 0xc1, 0x50, 0x7a,
	0x09, 0xb2, 0xb5, 0x56, 0x16, 0xdb, 0x5a, 0xb1, 0x5a, 0x39, 0xa4, 0x9f, 0x20, 0xc7, 0x7e, 0x9d,
	0xde, 0x7a, 0xf4, 0xd1, 0xc7, 0x9e, 0xdc, 0x46, 0xfe, 0x22, 0xc5, 0x2b, 0xd9, 0xd8, 0xa5, 0xd0,
	0x4b, 0x4f, 0x9a, 0x79, 0xe6, 0xf7, 0x08, 0x3d, 0x33, 0x82, 0x33, 0x11, 0xb3, 0x88, 0x07, 0x5e,
	0x2c, 0x85, 0x12, 0xd8, 0xe2, 0x2a, 0x1d, 0x31, 0x2f, 0x4d, 0x98, 0x4c, 0x1c, 0xd8, 0x3e, 0xf2,
	0x81, 0xd3, 0x0a, 0xb9, 0xba, 0x4d, 0x47, 0xde, 0x58, 0xcc, 0xdb, 0xa1, 0x08, 0x45, 0x5b, 0xcb,
	0xa3, 0x74, 0xa2, 0x3b, 0xdd, 0xe8, 0xaa, 0xc0, 0x5f, 0x1e, 0xe0, 0xf3, 0x3b, 0xae, 0xa6, 0xe2,
	0xae, 0x1d, 0x8a, 0x96, 0x1e, 0xb6, 0x16, 0xfe, 0x8c, 0x07, 0xbe, 0x12, 0x32, 0x69, 0xef, 0xcb,
	0xdc, 0xd7, 0xf8, 0x5a, 0x02, 0xf3, 0x5a, 0x8a, 0x05, 0x0f, 0x98, 0xc4, 0x04, 0x6a, 0x81, 0x98,
	0xfb, 0x3c, 0xb2, 0x51, 0x1d, 0x35, 0x4f, 0x7b, 0xb5, 0xec, 0x87, 0x5b, 0xfa, 0x88, 0x68, 0xa1,
	0xe2, 0x06, 0x98, 0x71, 0xc1, 0xda, 0xa5, 0x23, 0x62, 0xaf, 0xe3, 0x2b, 0x38, 0x93, 0x2c, 0xe0,
	0x92, 0x8d, 0xd5, 0x4d, 0x2a, 0xb9, 0x5d, 0xd6, 0xdc, 0x45, 0xb6, 0x76, 0x2d, 0x5a, 0xe8, 0x43,
	0xda, 0x2f, 0x6c, 0xd6, 0x0e, 0x1d, 0x4a, 0x8e, 0xbb, 0x50, 0x8b, 0x7d, 0xe9, 0xcf, 0x13, 0xbb,
	0x52, 0x2f, 0x37, 0xad, 0xce, 0x33, 0xef, 0x60, 0x37, 0xde, 0xee, 0x23, 0xbd, 0x6b, 0xcd, 0xbc,
	0x8b, 0x94, 0xbc, 0xa7, 0x85, 0x01, 0x77, 0xc1, 0x94, 0x2c, 0xbc, 0xe1, 0xd1, 0x44, 0xd8, 0x50,
	0x47, 0x4d, 0xab, 0x73, 0x7e, 0x64, 0xa6, 0x2c, 0xec, 0x47, 0x13, 0xd1, 0x33, 0x97, 0x6b, 0xd7,
	0x58, 0xad, 0x5d, 0x44, 0x4f, 0x64, 0x2e, 0x39, 0x5d, 0xb0, 0x0e, 0xde, 0x88, 0xff, 0x87, 0xf2,
	0x94, 0xdd, 0xe7, 0xf9, 0xe9, 0xb6, 0xc4, 0xe7, 0x50, 0x5d, 0xf8, 0xb3, 0x94, 0xe5, 0x89, 0x69,
	0xde, 0xbc, 0x2a, 0x5d, 0xa1, 0xc6, 0x7b, 0x30, 0x07, 0x22, 0xe4, 0xd1, 0x90, 0x0e, 0xfe, 0xba,
	0x3a, 0x17, 0xca, 0xa9, 0x9c, 0x15, 0x5b, 0xfb, 0x2f, 0x5b, 0xbb, 0xe5, 0x21, 0x1d, 0x14, 0xcc,
	0x76, 0xd2, 0x78, 0x40, 0x60, 0xbe, 0x4e, 0xd5, 0xed, 0x1b, 0x11, 0xb0, 0x7f, 0x72, 0x88, 0xa7,
	0x50, 0x4d, 0x94, 0xaf, 0x58, 0x71, 0x81, 0x1d, 0x90, 0x8b, 0xd8, 0x81, 0xca, 0x58, 0x04, 0xcc,
	0xae, 0x1c, 0x0d, 0xb5, 0xd6, 0x59, 0x40, 0xed, 0x43, 0xcc, 0xa2, 0xfe, 0x5b, 0x7c, 0x09, 0x55,
	0x9d, 0x10, 0x5f, 0xfc, 0xf1, 0x16, 0xce, 0xb1, 0xbc, 0x5f, 0xc6, 0x25, 0x9c, 0x6e, 0xa3, 0x08,
	0xc9, 0x3f, 0xb3, 0xdf, 0xac, 0xbb, 0x88, 0xce, 0x93, 0x23, 0x79, 0x98, 0x30, 0xd9, 0x7b, 0xbe,
	0x7c, 0x24, 0xc6, 0xea, 0x91, 0x18, 0xcb, 0x8c, 0xa0, 0x55, 0x46, 0xd0, 0xcf, 0x8c, 0xa0, 0x87,
	0x0d, 0x31, 0xbe, 0x6c, 0x88, 0xf1, 0x6d, 0x43, 0xd0, 0x6a, 0x43, 0x8c, 0xef, 0x1b, 0x62, 0x7c,
	0x3a, 0x89, 0xa7, 0x61, 0xdb, 0x8f, 0xf9, 0xa8, 0xa6, 0xff, 0xe2, 0x17, 0xbf, 0x02, 0x00, 0x00,
	0xff, 0xff, 0x00, 0xc3, 0x20, 0x1f, 0x55, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// OpenIDClient is the client API for OpenID service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OpenIDClient interface {
	// Login выдает URL для перехода на авторизацию к провайдеру.
	//
	// Возвращает InvalidArgument, если указан неподдерживаемый идентификатор
	// провайдера авторизации.
	Login(ctx context.Context, in *Provider, opts ...grpc.CallOption) (*LoginURL, error)
	// Authorize проверяет авторизацию и возвращает информацию об
	// авторизованном пользователе. Если пользователь не зарегистрирован,
	// то происходит его автоматическая регистрация.
	//
	// Возвращает ошибки:
	//  - NotFound - пользователь заблокирован
	//  - InvalidArgument - неверный формат данных входящего запроса
	//  - Internal - внутренние ошибки
	Authorize(ctx context.Context, in *AuthCode, opts ...grpc.CallOption) (*User, error)
}

type openIDClient struct {
	cc *grpc.ClientConn
}

func NewOpenIDClient(cc *grpc.ClientConn) OpenIDClient {
	return &openIDClient{cc}
}

func (c *openIDClient) Login(ctx context.Context, in *Provider, opts ...grpc.CallOption) (*LoginURL, error) {
	out := new(LoginURL)
	err := c.cc.Invoke(ctx, "/itube.users.OpenID/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openIDClient) Authorize(ctx context.Context, in *AuthCode, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/itube.users.OpenID/Authorize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OpenIDServer is the server API for OpenID service.
type OpenIDServer interface {
	// Login выдает URL для перехода на авторизацию к провайдеру.
	//
	// Возвращает InvalidArgument, если указан неподдерживаемый идентификатор
	// провайдера авторизации.
	Login(context.Context, *Provider) (*LoginURL, error)
	// Authorize проверяет авторизацию и возвращает информацию об
	// авторизованном пользователе. Если пользователь не зарегистрирован,
	// то происходит его автоматическая регистрация.
	//
	// Возвращает ошибки:
	//  - NotFound - пользователь заблокирован
	//  - InvalidArgument - неверный формат данных входящего запроса
	//  - Internal - внутренние ошибки
	Authorize(context.Context, *AuthCode) (*User, error)
}

// UnimplementedOpenIDServer can be embedded to have forward compatible implementations.
type UnimplementedOpenIDServer struct {
}

func (*UnimplementedOpenIDServer) Login(ctx context.Context, req *Provider) (*LoginURL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (*UnimplementedOpenIDServer) Authorize(ctx context.Context, req *AuthCode) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authorize not implemented")
}

func RegisterOpenIDServer(s *grpc.Server, srv OpenIDServer) {
	s.RegisterService(&_OpenID_serviceDesc, srv)
}

func _OpenID_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Provider)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenIDServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/itube.users.OpenID/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenIDServer).Login(ctx, req.(*Provider))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenID_Authorize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenIDServer).Authorize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/itube.users.OpenID/Authorize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenIDServer).Authorize(ctx, req.(*AuthCode))
	}
	return interceptor(ctx, in, info, handler)
}

var _OpenID_serviceDesc = grpc.ServiceDesc{
	ServiceName: "itube.users.OpenID",
	HandlerType: (*OpenIDServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _OpenID_Login_Handler,
		},
		{
			MethodName: "Authorize",
			Handler:    _OpenID_Authorize_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "openid.proto",
}

func (m *Provider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Provider) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Provider) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.RegInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOpenid(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	if len(m.Params) > 0 {
		for k := range m.Params {
			v := m.Params[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintOpenid(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintOpenid(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintOpenid(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.RedirectURI) > 0 {
		i -= len(m.RedirectURI)
		copy(dAtA[i:], m.RedirectURI)
		i = encodeVarintOpenid(dAtA, i, uint64(len(m.RedirectURI)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintOpenid(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintOpenid(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LoginURL) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginURL) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoginURL) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.URL) > 0 {
		i -= len(m.URL)
		copy(dAtA[i:], m.URL)
		i = encodeVarintOpenid(dAtA, i, uint64(len(m.URL)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintOpenid(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AuthCode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthCode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthCode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintOpenid(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.State) > 0 {
		i -= len(m.State)
		copy(dAtA[i:], m.State)
		i = encodeVarintOpenid(dAtA, i, uint64(len(m.State)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintOpenid(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintOpenid(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintOpenid(dAtA []byte, offset int, v uint64) int {
	offset -= sovOpenid(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Provider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovOpenid(uint64(l))
	}
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovOpenid(uint64(l))
	}
	l = len(m.RedirectURI)
	if l > 0 {
		n += 1 + l + sovOpenid(uint64(l))
	}
	if len(m.Params) > 0 {
		for k, v := range m.Params {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovOpenid(uint64(len(k))) + 1 + len(v) + sovOpenid(uint64(len(v)))
			n += mapEntrySize + 1 + sovOpenid(uint64(mapEntrySize))
		}
	}
	l = m.RegInfo.Size()
	n += 1 + l + sovOpenid(uint64(l))
	return n
}

func (m *LoginURL) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovOpenid(uint64(l))
	}
	l = len(m.URL)
	if l > 0 {
		n += 1 + l + sovOpenid(uint64(l))
	}
	return n
}

func (m *AuthCode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovOpenid(uint64(l))
	}
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovOpenid(uint64(l))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovOpenid(uint64(l))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovOpenid(uint64(l))
	}
	return n
}

func sovOpenid(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOpenid(x uint64) (n int) {
	return sovOpenid(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Provider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOpenid
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Provider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Provider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpenid
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOpenid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpenid
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOpenid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedirectURI", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpenid
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOpenid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedirectURI = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOpenid
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOpenid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowOpenid
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOpenid
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthOpenid
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthOpenid
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOpenid
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthOpenid
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthOpenid
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipOpenid(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthOpenid
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Params[mapkey] = mapvalue
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOpenid
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOpenid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RegInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOpenid(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOpenid
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOpenid
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginURL) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOpenid
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginURL: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginURL: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpenid
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOpenid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpenid
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOpenid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOpenid(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOpenid
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOpenid
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthCode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOpenid
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthCode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthCode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpenid
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOpenid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpenid
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOpenid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpenid
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOpenid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpenid
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOpenid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOpenid(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOpenid
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOpenid
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOpenid(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOpenid
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOpenid
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOpenid
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOpenid
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOpenid
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOpenid
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOpenid        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOpenid          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOpenid = fmt.Errorf("proto: unexpected end of group")
)
